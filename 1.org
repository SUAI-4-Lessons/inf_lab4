#+TITLE: ОРГАНИЗАЦИЯ ДИАЛОГА С ПОЛЬЗОВАТЕЛЕМ В MATLAB. ФОРМАТИРОВАННЫЙ ВЫВОД
#+LANGUAGE: ru
#+AUTHOR: В.Д. Панков
#+OPTIONS: toc:nil
#+DEPARTMENT: КАФЕДРА №43
#+TEACHER: М.В. Величко
#+COURSE: Информатика
#+TYPE: ОТЧЕТ О ЛАБОРАТОРНОЙ РАБОТЕ №4
* Выполнение индивидуального задания

Цель: Знакомство с особенностями ввода и вывода данных
в MATLAB, организацией диалога с пользователем,
проверки введенных пользователем данных.
Организация форматированного вывода результатов расчета.
Закрепление навыков по преобразованию типов данных,
организации программ-сценариев и подпрограмм.

В ходе выполнения работы использовался 4 вариант.

Задание №1
Написать функцию, которая запросит у пользователя данное, проверит,
удовлетворяет ли введенное данное условию, приведенному в таблице 4
(условие 1 согласно номеру варианта). Если введенное пользователем
значение не удовлетворяет условию, функция выведет сообщение об
ошибке, предложит заново ввести данное. Последнее действие должно выполняться,
пока не будет осуществлен корректный ввод данного.
Входным параметром функции является строка, которая будет выведена при
запросе на ввод числа. Выходным параметром является корректное данное
(удовлетворяющее условию 1). Функция должна быть задокументирована. 

Условие по номеру варианту: "число является положительным".

Код для выполнения задания 1 представлен в листинге [[listing1]].

#+CAPTION: Код для выполнения задания 1
#+NAME: listing1
#+INCLUDE: ./src/inputPositive.m src octave

Данные для тестирования функции представлены в
таблице [[testdata]].

#+NAME: testdata
#+CAPTION: Тестовые данные
|---+----------------+---------------------|
|   | Входные данные | Ожидаемый результат |
|---+----------------+---------------------|
| / |<>              | <>                  |
|   | 127            | 127                 |
|---+----------------+---------------------|
|   | 127.83         | 127.83              |
|---+----------------+---------------------|
|   | 0              | Повторый ввод       |
|---+----------------+---------------------|
|   | -1             | Повторный ввод      |
|---+----------------+---------------------|
|   | 127,83         | Повторный ввод      |
|---+----------------+---------------------|
|   | 10 + 2i        | 10 + 2i             |
|---+----------------+---------------------|
|   | -10 + 2i       | Повторный ввод      |
|---+----------------+---------------------|
|   | sss            | Повторный ввод      |
|---+----------------+---------------------|

На рисунках [[testpos]] и [[testpos2]] представлено тестирование функции.

#+NAME: testpos
#+CAPTION: Тестирование функции inputPositive
[[./images/1.png]]

#+NAME: testpos2
#+CAPTION: Тестирование функции inputPositive
[[./images/2.png]]

Написать функцию, которая запросит два числовых данных,
проверит их в соответствии с условием 1 (см. задание 1),
для чего использует ранее написанную функцию из задания 1.
Два числа проверит на условие 2 (см. таблицу 4).
Если условие ложно, функция выведет сообщение об ошибке и
предложит повторить ввод. Последнее действие должно выполняться,
пока не будет осуществлен ввод данных, соответствующих условию 2.
Входных параметров функция не имеет. Выходными параметрами являются
два числа, удовлетворяющих условию 1 и условию 2. Функция должна
быть задокументирована.

Условие по номеру варианту: "Первое из возвращаемых функцией чисел как
минимум в 2 раза меньше второго".

Код функции представлен в листинге [[listing2]].

#+NAME: listing2
#+CAPTION: Код для выполнения задания 2
#+INCLUDE: ./src/inputIsHalfOrLess.m src octave

Данные для тестирования функции представлены в
таблице [[testdata2]].

#+NAME: testdata2
#+CAPTION: Тестовые данные
|---+----------------+---------------------|
|   | Входные данные | Ожидаемый результат |
|---+----------------+---------------------|
| / | <>             | <>                  |
|   | 1,2            | 1,2                 |
|---+----------------+---------------------|
|   | 2,1            | Повторный ввод      |
|---+----------------+---------------------|
|   | 3,5            | Повторный ввод      |
|---+----------------+---------------------|
|   | 3,10           | 3,10                |
|---+----------------+---------------------|

На рисунке [[testfun2]] представлено тестирование функции.

#+NAME: testfun2
#+CAPTION: Тестирование функции "inputIsHalfOrLess"
[[./images/3.png]]


Написать функцию, которая выведет в консоль таблицу вида:

#+begin_src text
/------------------------\
|  Аргумент |   Функция  |
|------------------------|
|           |            |


|           |            |
\------------------------/
#+end_src



Таблица должна быть заполнена данными, поступающими в функцию
как аргумент (две переменные, представляющие собой вектора
одинаковой длины, элементами которых являются числа). Значения
первой переменной функция занесет в первый столбик таблицы,
а соответствующие значения второй – во второй столбик таблицы. Пример
работы функции приведен ниже. Функция должна быть задокументирована.

Код функции представлен в листинге [[listing3]].

#+NAME: listing3
#+CAPTION: Код для выполнения задания 3
#+INCLUDE: ./src/printtable.m src octave

На рисунке [[testfun3]] представлено тестирование функции.

#+NAME: testfun3
#+CAPTION: Тестирование функции "printtable"
[[./images/4.png]]

Написать программу (сценарий), которая запросит у пользователя
математическую функцию, запросит интервал для построения графика
заданной пользователем функции и проверит введенные значения согласно
условию 1 и условию 2 (вызовет ранее написанные функции для заданий
1-2). Далее программа создаст вектор значений аргумента, рассчитает
значения функции для рассчитанных значений аргумента, выведет
результат расчета в виде таблицы (с использованием функции для
задания 3) и построит график функции.


Код для выполнения задания 4 представлен в листинге [[listing4]].

#+NAME: listing4
#+CAPTION: Код для выполнения задания 4
#+INCLUDE: ./src/main.m src octave

На рисунках [[testfun4]] и [[testfun4_1]]  представлено тестирование скрипта для задания 4.

#+NAME: testfun4
#+CAPTION: Тестирование скрипта для задания 4
[[./images/5.png]]

#+NAME: testfun4_1
#+CAPTION: Построенный график по данным
[[./images/6.png]]

Дополнительное задание*: Программа должна запросить шаг построения
графика, и проверить введенное значение на корректность ввода, а также
на возможность построения графика функции с введенным пользователем
шагом. Программа должна запрашивать шаг до тех пор, пока не будет
введено корректное значение. Запрос шага с проверкой на корректность
ввода реализовать отдельной функцией. Функция должна быть
задокументирована.

Код функции для ввода шага представлен в листинге [[listing5]].

#+NAME: listing5
#+CAPTION: Код функции для ввода шага
#+INCLUDE: ./src/inputStep.m src octave

Данные для тестирования функции представлены в
таблице [[testdata3]].

#+NAME: testdata3
#+CAPTION: Тестовые данные
|---+------------------------+---------------------|
|   | Входные данные         | Ожидаемый результат |
|---+------------------------+---------------------|
| / | <>                     | <>                  |
|   | min = 1                | 1                   |
|   | max = 2                |                     |
|   | Введённые данные: 1    |                     |
|---+------------------------+---------------------|
|   | min = 1                | Повторный ввод      |
|   | max = 2                |                     |
|   | Введённые данные: 1.01 |                     |
|---+------------------------+---------------------|
|   | min = 2                | Ошибка              |
|   | max = 1                |                     |
|---+------------------------+---------------------|
|   | 3,10                   | 3,10                |
|---+------------------------+---------------------|


На рисунке [[testfun5] представлено тестирование функции.

#+NAME: testfun5
#+CAPTION: Тестирование функции "inputStep"
[[./images/7.png]]
* Выводы

Ознакомился с особенностями ввода и вывода данных
в MATLAB, организацией диалога с пользователем,
проверки введенных пользователем данных.
Освоил организацию форматированного вывода результатов расчета и 
закрепил навыки по преобразованию типов данных,
организации программ-сценариев и подпрограмм.
